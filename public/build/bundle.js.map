{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/drawFlower.ts","../../src/network/activations.ts","../../src/network/makeNet.ts","../../src/Flower.svelte","../../src/FlowerGrid.svelte","../../src/network/network.ts","../../src/network/IdentityNet.ts","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value = ret) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            let j = 0;\n            const remove = [];\n            while (j < node.attributes.length) {\n                const attribute = node.attributes[j++];\n                if (!attributes[attribute.name]) {\n                    remove.push(attribute.name);\n                }\n            }\n            for (let k = 0; k < remove.length; k++) {\n                node.removeAttribute(remove[k]);\n            }\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = '' + data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    const z_index = (parseInt(computed_style.zIndex) || 0) - 1;\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        `overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: ${z_index};`);\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(anchor = null) {\n        this.a = anchor;\n        this.e = this.n = null;\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.h(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = node.ownerDocument;\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = doc.head.appendChild(element('style')).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            info.blocks[i] = null;\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${String(value).replace(/\"/g, '&#34;').replace(/'/g, '&#39;')}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    // onMount happens before the initial afterUpdate\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const prop_values = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, prop_values, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.29.7' }, detail)));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, SvelteComponent, SvelteComponentDev, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_space, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, escape, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getContext, get_binding_group_value, get_current_component, get_custom_elements_slots, get_slot_changes, get_slot_context, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, has_prop, identity, init, insert, insert_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, update_keyed_each, update_slot, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","const getColorIndicesForCoord = (x, y, width) => {\n    const red = y * (width * 4) + x * 4;\n    return [red, red + 1, red + 2, red + 3];\n};\nconst drawLayer = (net, imageData, layer, width, height) => {\n    const data = imageData.data;\n    const scale = Math.pow(1 / 2, layer);\n    let count = 0;\n    for (let theta = 0; theta <= 2 * Math.PI; theta += Math.PI / 500) {\n        let P = 6;\n        const out = net(Math.sin(P * theta), 0, layer, 1);\n        const rmax = Math.abs(out[3]) * (width / 2 - 20) + 20;\n        for (let r = 1; r <= rmax; r += 1) {\n            const [red, green, blue, rmax] = net(Math.sin(P * theta), r, layer, 1);\n            const x = Math.floor(r * Math.cos(theta) * scale + width / 2);\n            const y = Math.floor(height / 2 - r * Math.sin(theta) * scale);\n            const colorIndices = getColorIndicesForCoord(x, y, width);\n            const [redIndex, greenIndex, blueIndex, alphaIndex] = colorIndices;\n            data[redIndex] = Math.floor(red * 255);\n            data[greenIndex] = Math.floor(green * 255);\n            data[blueIndex] = Math.floor(blue * 255);\n            count++;\n        }\n    }\n    console.log('count: ', count);\n    return imageData;\n};\nexport default (net, ctx, width, height) => {\n    const imageData = ctx.getImageData(0, 0, width, height);\n    drawLayer(net, imageData, 0, width, height);\n    drawLayer(net, imageData, 1, width, height);\n    drawLayer(net, imageData, 2, width, height);\n    return imageData;\n};\n","export const input = (x) => () => x;\nexport const identity = (x) => x;\nexport const sigmoid = (x) => 1 / (1 + Math.exp(-x));\nexport const normal = (x) => (1 / Math.sqrt(2 * Math.PI)) * Math.exp(-(x * x) / 2);\nexport const tanh = (x) => Math.tanh(x);\nexport const sine = (x) => Math.sin(x);\nexport const relu = (x) => Math.max(0, x);\nexport const abs = (x) => Math.abs(x);\nexport const square = (x) => x * x;\n","import { input } from './activations';\nconst dot = (u, v) => {\n    let tot = 0;\n    for (let i = 0; i != u.length; i++) {\n        tot += u[i] * v[i];\n    }\n    return tot;\n};\nconst activate = (n) => {\n    if (n.inputs.length == 0) {\n        return n.activation();\n    }\n    const inputs = n.inputs.map(activate);\n    return n.activation(dot(inputs, n.weights));\n};\nexport default (connections, genes) => {\n    const nodes = new Map();\n    const outputs = Array();\n    Object.keys(genes).forEach(id => {\n        const g = genes[id];\n        nodes[id] = {\n            ...g,\n            inputs: [],\n            weights: [],\n        };\n        g.isOutput && outputs.push(nodes[g.id]);\n    });\n    connections.forEach((conn) => {\n        nodes[conn.to].inputs.push(nodes[conn.from]);\n        nodes[conn.to].weights.push(conn.weight);\n    }, []);\n    return (theta, r, layer, bias) => {\n        nodes[1].activation = input(theta);\n        nodes[2].activation = input(r);\n        nodes[3].activation = input(layer);\n        nodes[4].activation = input(bias);\n        return outputs.map(activate);\n    };\n};\n","<script lang='ts'>\n  import { createEventDispatcher } from 'svelte';\n  import { onMount } from \"svelte\";\n  import drawFlower from './drawFlower'\n  import makeNet from \"./network/makeNet\";\n\n  export let genome\n\n\n  let canvas\n  let ctx: CanvasRenderingContext2D\n  let width = 200\n  let height = 200\n  let selected = false\n  let hover = false\n\n  onMount(() => {\n    ctx = canvas.getContext('2d')\n    ctx.fillStyle = 'white'\n    ctx.fillRect(0, 0, width, height)\n    const net = makeNet(genome.connections, genome.genes)\n    const flowerData = drawFlower(net, ctx, width, height)\n    ctx.putImageData(flowerData, 0, 0)\n  })\n\n\tconst dispatch = createEventDispatcher();\n  const handleFlowerClick = e => {\n    selected = !selected\n    dispatch('click')\n  }\n</script>\n\n<div\n  class='container'\n  class:selected\n  class:hover\n  on:mouseenter={()=>hover = !hover}\n  on:mouseleave={()=>hover = !hover}\n  on:click={handleFlowerClick}\n  style=\"width:{width}px; height:{height}px;\">\n  <canvas\n    class='flower-canvas'\n    bind:this={canvas}\n    {width}\n    {height} />\n</div>\n\n<style>\n  .container {\n    border: 4px black solid;\n  }\n  .hover {\n    border-color: dodgerblue;\n  }\n  .selected {\n    border-color: fuchsia;\n  }\n</style>","<script lang='ts'>\n  import Flower from './Flower.svelte'\n  import type { Genome } from './network/network';\n\n  export let flowers: Array<Genome>\n\n  let generation = 0\n  let selected: Genome;\n  const selectFlower = genome => {\n    if (selected) {\n      if (selected.id === genome.id) {\n        selected = undefined\n      } else {\n        console.log('parent1: ', selected)\n        console.log('parent2: ', genome)\n        flowers = selected.cross(genome, 4)\n        selected = undefined\n        generation++\n      }\n    } else {\n      selected = genome\n    }\n  }\n</script>\n\n<div class='container'>\n  <h1>Flowers!</h1>\n  <p>Click on two flowers to crossbreed them. Generation {generation}</p>\n  <div class='flower-grid'>\n    {#each flowers as genome (genome.id)}\n      <Flower\n        {genome}\n        on:click={() => selectFlower(genome)}/>\n    {/each}\n  </div>\n</div>\n\n<style>\n  .flower-grid {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-evenly;\n  }\n</style>","import * as activations from './activations';\nimport './IdentityNet';\nexport class Genome {\n    constructor() {\n        this._id = Genome.genomeId++;\n        this.mutationProb = .1;\n    }\n    get id() { return this._id; }\n    clone() {\n        const genome = new Genome();\n        genome.connections = this.connections.map(c => ({ ...c }));\n        genome.genes = new Map();\n        Object.values(this.genes).forEach(g => genome.genes[g.id] = { ...g });\n        return genome;\n    }\n    mutate() {\n        const clone = this.clone();\n        clone.mutateWeights();\n        if (Math.random() < .5) {\n            clone.addConnection();\n        }\n        if (Math.random() < .3) {\n            clone.addGene();\n        }\n        return clone;\n    }\n    mutateWeights() {\n        this.connections.forEach((c) => {\n            if (Math.random() < this.mutationProb) {\n                c.weight += Math.random() * .3 - .6;\n            }\n        });\n    }\n    addConnection() {\n        calculateDistances(this.connections, this.genes);\n        const ids = Object.values(this.genes).map(g => g.id);\n        const fromCandidates = ids.filter(id => ![5, 6, 7, 8].some(outId => outId == id));\n        let from;\n        let nonadjacent;\n        do {\n            from = fromCandidates[Math.floor(Math.random() * fromCandidates.length)];\n            const fromConns = this.connections.filter(c => c.from == from).map(c => c.to);\n            nonadjacent = Object.values(this.genes).map(g => g.id);\n            nonadjacent = ids.filter(id => {\n                return !fromConns.some(to => to == id)\n                    && ![1, 2, 3, 4].some(to => to == id)\n                    && this.genes[id].distance > this.genes[from].distance;\n            });\n        } while (nonadjacent.length == 0);\n        const to = nonadjacent[Math.floor(Math.random() * nonadjacent.length)];\n        this.connections.push({\n            id: Genome.connectionId++,\n            from,\n            to,\n            weight: Math.random() * 2 - 1\n        });\n    }\n    deleteConnection() {\n    }\n    addGene() {\n        const connIndex = Math.floor(Math.random() * this.connections.length);\n        const fromOld = this.connections[connIndex].from;\n        const toOld = this.connections[connIndex].to;\n        this.connections.splice(connIndex, 1);\n        let a = { ...activations };\n        delete a.input;\n        const candidateActivations = Object.values(a);\n        const activation = candidateActivations[Math.floor(Math.random() * candidateActivations.length)];\n        const id = Genome.geneId++;\n        this.genes[id] = {\n            id,\n            activation,\n            isOutput: false,\n            distance: 1\n        };\n        this.connections.push({\n            id: Genome.connectionId++,\n            from: fromOld,\n            to: id,\n            weight: Math.random() * 2 - 1\n        });\n        this.connections.push({\n            id: Genome.connectionId++,\n            from: id,\n            to: toOld,\n            weight: Math.random() * 2 - 1\n        });\n        return id;\n    }\n    cross(other, numChildren) {\n        const proto = this.clone();\n        for (const g of Object.values(other.genes)) {\n            proto.genes[g.id] = { ...g };\n        }\n        const children = Array(numChildren)\n            .fill(proto, 0, numChildren)\n            .map(p => {\n            const child = p.clone();\n            child.connections = [];\n            return child;\n        });\n        for (const c of other.connections) {\n            const thisIndex = proto.connections.findIndex(p => p.id === c.id);\n            if (thisIndex != -1) {\n                for (const child of children) {\n                    if (Math.random() < .5) {\n                        child.connections.push(proto.connections[thisIndex]);\n                    }\n                    else {\n                        child.connections.push(c);\n                    }\n                }\n                proto.connections.splice(thisIndex, 1);\n            }\n            else {\n                for (const child of children) {\n                    child.connections.push(c);\n                }\n            }\n        }\n        children.forEach(c => c.connections = c.connections.concat(proto.connections));\n        console.log('children: ', children);\n        return children.map(c => c.mutate());\n    }\n}\nGenome.genomeId = 1;\nGenome.geneId = 9;\nGenome.connectionId = 5;\nexport const calculateDistances = (connections, genes) => {\n    const conns = [...connections];\n    const done = new Map();\n    done[1] = genes[1];\n    done[2] = genes[2];\n    done[3] = genes[3];\n    done[4] = genes[4];\n    while (conns.length > 0) {\n        for (let i = conns.length - 1; i != -1; i--) {\n            const c = conns[i];\n            if (done[c.from]) {\n                genes[c.to].distance = done[c.from].distance + 1;\n                done[c.to] = genes[c.to];\n                conns.splice(i, 1);\n            }\n        }\n    }\n};\n","import { Genome } from './network';\nimport { sigmoid, sine } from './activations';\nconst genes = new Map();\ngenes[1] = {\n    id: 1,\n    activation: () => .5,\n    isOutput: false,\n    distance: 0,\n};\ngenes[2] = {\n    id: 2,\n    activation: () => .6,\n    isOutput: false,\n    distance: 0,\n};\ngenes[3] = {\n    id: 3,\n    activation: () => .7,\n    isOutput: false,\n    distance: 0,\n};\ngenes[4] = {\n    id: 4,\n    activation: () => .8,\n    isOutput: false,\n    distance: 0,\n};\ngenes[5] = {\n    id: 5,\n    activation: sigmoid,\n    isOutput: true,\n    distance: 1,\n};\ngenes[6] = {\n    id: 6,\n    activation: sigmoid,\n    isOutput: true,\n    distance: 1,\n};\ngenes[7] = {\n    id: 7,\n    activation: sigmoid,\n    isOutput: true,\n    distance: 1,\n};\ngenes[8] = {\n    id: 8,\n    activation: sine,\n    isOutput: true,\n    distance: 1,\n};\nconst connections = [\n    {\n        id: 1,\n        from: 1,\n        to: 5,\n        weight: Math.random() - .5\n    },\n    {\n        id: 2,\n        from: 2,\n        to: 6,\n        weight: Math.random() - .5\n    },\n    {\n        id: 3,\n        from: 3,\n        to: 7,\n        weight: Math.random() - .5\n    },\n    {\n        id: 4,\n        from: 4,\n        to: 8,\n        weight: (Math.random() - .5) / 2\n    },\n];\nconst genome = new Genome();\ngenome.connections = connections;\ngenome.genes = genes;\nexport default genome;\n","<script lang=\"ts\">\n\timport FlowerGrid from './FlowerGrid.svelte'\n\timport genome from './network/IdentityNet';\n\timport type { Genome } from './network/network';\n\n\tconst flowers = Array<Genome>(3)\n\t\t.fill(genome)\n\t\t.map(g => g.mutate())\n</script>\n\n<main>\n\t<FlowerGrid {flowers} />\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>","import App from './App.svelte';\nconst app = new App({\n    target: document.body,\n    props: {}\n});\nexport default app;\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","element","name","document","createElement","text","data","createTextNode","space","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_style","key","important","style","setProperty","toggle_class","toggle","classList","current_component","set_current_component","component","get_current_component","Error","createEventDispatcher","type","detail","callbacks","$$","e","createEvent","initCustomEvent","custom_event","slice","call","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","flushing","seen_callbacks","Set","flush","i","length","update","pop","callback","has","add","clear","fragment","before_update","dirty","p","ctx","after_update","outroing","outros","transition_in","block","local","delete","transition_out","o","c","d","outro_and_destroy_block","lookup","create_component","mount_component","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","detaching","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","parent_component","prop_values","bound","context","Map","skip_bound","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","[object Object]","this","$destroy","index","indexOf","splice","$$props","obj","$$set","keys","getColorIndicesForCoord","x","y","width","red","drawLayer","net","imageData","layer","height","scale","Math","pow","count","theta","PI","P","out","sin","rmax","abs","r","green","blue","floor","cos","colorIndices","redIndex","greenIndex","blueIndex","alphaIndex","console","log","input","sigmoid","exp","sine","sqrt","tanh","max","activate","n","inputs","activation","u","v","tot","dot","weights","canvas","genome","selected","hover","getContext","fillStyle","fillRect","flowerData","getImageData","drawFlower","connections","genes","outputs","id","g","isOutput","conn","to","weight","bias","makeNet","putImageData","dispatch","wholeText","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","old_indexes","new_blocks","new_lookup","deltas","child_ctx","get","set","will_move","did_move","first","new_block","old_block","new_key","old_key","flowers","generation","selectFlower","undefined","cross","Genome","_id","genomeId","mutationProb","values","clone","mutateWeights","random","addConnection","addGene","calculateDistances","ids","fromCandidates","some","outId","nonadjacent","fromConns","distance","connectionId","connIndex","fromOld","toOld","activations","candidateActivations","geneId","other","numChildren","proto","child","thisIndex","findIndex","concat","mutate","conns","done","body"],"mappings":"gCAAA,SAASA,KAgBT,SAASC,EAAIC,GACT,OAAOA,IAEX,SAASC,IACL,OAAOC,OAAOC,OAAO,MAEzB,SAASC,EAAQC,GACbA,EAAIC,QAAQP,GAEhB,SAASQ,EAAYC,GACjB,MAAwB,mBAAVA,EAElB,SAASC,EAAeC,EAAGC,GACvB,OAAOD,GAAKA,EAAIC,GAAKA,EAAID,IAAMC,GAAOD,GAAkB,iBAANA,GAAgC,mBAANA,EA2JhF,SAASE,EAAOC,EAAQC,GACpBD,EAAOE,YAAYD,GAEvB,SAASE,EAAOH,EAAQC,EAAMG,GAC1BJ,EAAOK,aAAaJ,EAAMG,GAAU,MAExC,SAASE,EAAOL,GACZA,EAAKM,WAAWC,YAAYP,GAQhC,SAASQ,EAAQC,GACb,OAAOC,SAASC,cAAcF,GAoBlC,SAASG,EAAKC,GACV,OAAOH,SAASI,eAAeD,GAEnC,SAASE,IACL,OAAOH,EAAK,KAKhB,SAASI,EAAOhB,EAAMiB,EAAOC,EAASC,GAElC,OADAnB,EAAKoB,iBAAiBH,EAAOC,EAASC,GAC/B,IAAMnB,EAAKqB,oBAAoBJ,EAAOC,EAASC,GAuB1D,SAASG,EAAKtB,EAAMuB,EAAWC,GACd,MAATA,EACAxB,EAAKyB,gBAAgBF,GAChBvB,EAAK0B,aAAaH,KAAeC,GACtCxB,EAAK2B,aAAaJ,EAAWC,GAgHrC,SAASI,EAAU5B,EAAM6B,EAAKL,EAAOM,GACjC9B,EAAK+B,MAAMC,YAAYH,EAAKL,EAAOM,EAAY,YAAc,IA8EjE,SAASG,EAAazB,EAASC,EAAMyB,GACjC1B,EAAQ2B,UAAUD,EAAS,MAAQ,UAAUzB,GA0LjD,IAAI2B,EACJ,SAASC,EAAsBC,GAC3BF,EAAoBE,EAExB,SAASC,IACL,IAAKH,EACD,MAAM,IAAII,MAAM,oDACpB,OAAOJ,EAcX,SAASK,IACL,MAAMH,EAAYC,IAClB,MAAO,CAACG,EAAMC,KACV,MAAMC,EAAYN,EAAUO,GAAGD,UAAUF,GACzC,GAAIE,EAAW,CAGX,MAAM3B,EApNlB,SAAsByB,EAAMC,GACxB,MAAMG,EAAIpC,SAASqC,YAAY,eAE/B,OADAD,EAAEE,gBAAgBN,GAAM,GAAO,EAAOC,GAC/BG,EAiNeG,CAAaP,EAAMC,GACjCC,EAAUM,QAAQ1D,SAAQN,IACtBA,EAAGiE,KAAKb,EAAWrB,QAqBnC,MAAMmC,EAAmB,GAEnBC,EAAoB,GACpBC,EAAmB,GACnBC,EAAkB,GAClBC,EAAmBC,QAAQC,UACjC,IAAIC,GAAmB,EAWvB,SAASC,EAAoB1E,GACzBoE,EAAiBO,KAAK3E,GAK1B,IAAI4E,GAAW,EACf,MAAMC,EAAiB,IAAIC,IAC3B,SAASC,IACL,IAAIH,EAAJ,CAEAA,GAAW,EACX,EAAG,CAGC,IAAK,IAAII,EAAI,EAAGA,EAAId,EAAiBe,OAAQD,GAAK,EAAG,CACjD,MAAM5B,EAAYc,EAAiBc,GACnC7B,EAAsBC,GACtB8B,EAAO9B,EAAUO,IAIrB,IAFAR,EAAsB,MACtBe,EAAiBe,OAAS,EACnBd,EAAkBc,QACrBd,EAAkBgB,KAAlBhB,GAIJ,IAAK,IAAIa,EAAI,EAAGA,EAAIZ,EAAiBa,OAAQD,GAAK,EAAG,CACjD,MAAMI,EAAWhB,EAAiBY,GAC7BH,EAAeQ,IAAID,KAEpBP,EAAeS,IAAIF,GACnBA,KAGRhB,EAAiBa,OAAS,QACrBf,EAAiBe,QAC1B,KAAOZ,EAAgBY,QACnBZ,EAAgBc,KAAhBd,GAEJI,GAAmB,EACnBG,GAAW,EACXC,EAAeU,SAEnB,SAASL,EAAOvB,GACZ,GAAoB,OAAhBA,EAAG6B,SAAmB,CACtB7B,EAAGuB,SACH9E,EAAQuD,EAAG8B,eACX,MAAMC,EAAQ/B,EAAG+B,MACjB/B,EAAG+B,MAAQ,EAAE,GACb/B,EAAG6B,UAAY7B,EAAG6B,SAASG,EAAEhC,EAAGiC,IAAKF,GACrC/B,EAAGkC,aAAavF,QAAQoE,IAiBhC,MAAMoB,EAAW,IAAIhB,IACrB,IAAIiB,EAcJ,SAASC,EAAcC,EAAOC,GACtBD,GAASA,EAAMjB,IACfc,EAASK,OAAOF,GAChBA,EAAMjB,EAAEkB,IAGhB,SAASE,EAAeH,EAAOC,EAAO/E,EAAQiE,GAC1C,GAAIa,GAASA,EAAMI,EAAG,CAClB,GAAIP,EAAST,IAAIY,GACb,OACJH,EAASR,IAAIW,GACbF,EAAOO,EAAE3B,MAAK,KACVmB,EAASK,OAAOF,GACZb,IACIjE,GACA8E,EAAMM,EAAE,GACZnB,QAGRa,EAAMI,EAAEH,IAmThB,SAASM,EAAwBP,EAAOQ,GACpCL,EAAeH,EAAO,EAAG,GAAG,KACxBQ,EAAON,OAAOF,EAAMtD,QAqR5B,SAAS+D,EAAiBT,GACtBA,GAASA,EAAMK,IAKnB,SAASK,EAAgBvD,EAAWvC,EAAQI,GACxC,MAAMuE,SAAEA,EAAQoB,SAAEA,EAAQC,WAAEA,EAAUhB,aAAEA,GAAiBzC,EAAUO,GACnE6B,GAAYA,EAASsB,EAAEjG,EAAQI,GAE/ByD,GAAoB,KAChB,MAAMqC,EAAiBH,EAASI,IAAIjH,GAAKkH,OAAO1G,GAC5CsG,EACAA,EAAWlC,QAAQoC,GAKnB3G,EAAQ2G,GAEZ3D,EAAUO,GAAGiD,SAAW,MAE5Bf,EAAavF,QAAQoE,GAEzB,SAASwC,EAAkB9D,EAAW+D,GAClC,MAAMxD,EAAKP,EAAUO,GACD,OAAhBA,EAAG6B,WACHpF,EAAQuD,EAAGkD,YACXlD,EAAG6B,UAAY7B,EAAG6B,SAASe,EAAEY,GAG7BxD,EAAGkD,WAAalD,EAAG6B,SAAW,KAC9B7B,EAAGiC,IAAM,IAGjB,SAASwB,EAAWhE,EAAW4B,IACI,IAA3B5B,EAAUO,GAAG+B,MAAM,KACnBxB,EAAiBS,KAAKvB,GA9tBrBqB,IACDA,GAAmB,EACnBH,EAAiB+C,KAAKtC,IA8tBtB3B,EAAUO,GAAG+B,MAAM4B,KAAK,IAE5BlE,EAAUO,GAAG+B,MAAOV,EAAI,GAAM,IAAO,GAAMA,EAAI,GAEnD,SAASuC,EAAKnE,EAAWnB,EAASuF,EAAUC,EAAiBC,EAAWC,EAAOjC,EAAQ,EAAE,IACrF,MAAMkC,EAAmB1E,EACzBC,EAAsBC,GACtB,MAAMyE,EAAc5F,EAAQ0F,OAAS,GAC/BhE,EAAKP,EAAUO,GAAK,CACtB6B,SAAU,KACVI,IAAK,KAEL+B,MAAAA,EACAzC,OAAQpF,EACR4H,UAAAA,EACAI,MAAO7H,IAEP2G,SAAU,GACVC,WAAY,GACZpB,cAAe,GACfI,aAAc,GACdkC,QAAS,IAAIC,IAAIJ,EAAmBA,EAAiBjE,GAAGoE,QAAU,IAElErE,UAAWzD,IACXyF,MAAAA,EACAuC,YAAY,GAEhB,IAAIC,GAAQ,EAkBZ,GAjBAvE,EAAGiC,IAAM4B,EACHA,EAASpE,EAAWyE,GAAa,CAAC7C,EAAGmD,KAAQC,KAC3C,MAAM9F,EAAQ8F,EAAKnD,OAASmD,EAAK,GAAKD,EAOtC,OANIxE,EAAGiC,KAAO8B,EAAU/D,EAAGiC,IAAIZ,GAAIrB,EAAGiC,IAAIZ,GAAK1C,MACtCqB,EAAGsE,YAActE,EAAGmE,MAAM9C,IAC3BrB,EAAGmE,MAAM9C,GAAG1C,GACZ4F,GACAd,EAAWhE,EAAW4B,IAEvBmD,KAET,GACNxE,EAAGuB,SACHgD,GAAQ,EACR9H,EAAQuD,EAAG8B,eAEX9B,EAAG6B,WAAWiC,GAAkBA,EAAgB9D,EAAGiC,KAC/C3D,EAAQpB,OAAQ,CAChB,GAAIoB,EAAQoG,QAAS,CACjB,MAAMC,EAxoClB,SAAkBhH,GACd,OAAOiH,MAAMC,KAAKlH,EAAQmH,YAuoCJC,CAASzG,EAAQpB,QAE/B8C,EAAG6B,UAAY7B,EAAG6B,SAASmD,EAAEL,GAC7BA,EAAMhI,QAAQa,QAIdwC,EAAG6B,UAAY7B,EAAG6B,SAASc,IAE3BrE,EAAQ2G,OACR5C,EAAc5C,EAAUO,GAAG6B,UAC/BmB,EAAgBvD,EAAWnB,EAAQpB,OAAQoB,EAAQhB,QACnD8D,IAEJ5B,EAAsByE,GA0C1B,MAAMiB,EACFC,WACI5B,EAAkB6B,KAAM,GACxBA,KAAKC,SAAWlJ,EAEpBgJ,IAAItF,EAAM4B,GACN,MAAM1B,EAAaqF,KAAKpF,GAAGD,UAAUF,KAAUuF,KAAKpF,GAAGD,UAAUF,GAAQ,IAEzE,OADAE,EAAUiB,KAAKS,GACR,KACH,MAAM6D,EAAQvF,EAAUwF,QAAQ9D,IACjB,IAAX6D,GACAvF,EAAUyF,OAAOF,EAAO,IAGpCH,KAAKM,GA1+CT,IAAkBC,EA2+CNN,KAAKO,QA3+CCD,EA2+CkBD,EA1+CG,IAA5BlJ,OAAOqJ,KAAKF,GAAKpE,UA2+ChB8D,KAAKpF,GAAGsE,YAAa,EACrBc,KAAKO,MAAMF,GACXL,KAAKpF,GAAGsE,YAAa,IChhDjC,MAAMuB,EAA0B,CAACC,EAAGC,EAAGC,KACnC,MAAMC,EAAMF,GAAa,EAARC,GAAiB,EAAJF,EAC9B,MAAO,CAACG,EAAKA,EAAM,EAAGA,EAAM,EAAGA,EAAM,IAEnCC,EAAY,CAACC,EAAKC,EAAWC,EAAOL,EAAOM,KAC7C,MAAMtI,EAAOoI,EAAUpI,KACjBuI,EAAQC,KAAKC,IAAI,GAAOJ,GAC9B,IAAIK,EAAQ,EACZ,IAAK,IAAIC,EAAQ,EAAGA,GAAS,EAAIH,KAAKI,GAAID,GAASH,KAAKI,GAAK,IAAK,CAC9D,IAAIC,EAAI,EACR,MAAMC,EAAMX,EAAIK,KAAKO,IAAIF,EAAIF,GAAQ,EAAGN,EAAO,GACzCW,EAAOR,KAAKS,IAAIH,EAAI,KAAOd,EAAQ,EAAI,IAAM,GACnD,IAAK,IAAIkB,EAAI,EAAGA,GAAKF,EAAME,GAAK,EAAG,CAC/B,MAAOjB,EAAKkB,EAAOC,EAAMJ,GAAQb,EAAIK,KAAKO,IAAIF,EAAIF,GAAQO,EAAGb,EAAO,GAC9DP,EAAIU,KAAKa,MAAMH,EAAIV,KAAKc,IAAIX,GAASJ,EAAQP,EAAQ,GACrDD,EAAIS,KAAKa,MAAMf,EAAS,EAAIY,EAAIV,KAAKO,IAAIJ,GAASJ,GAClDgB,EAAe1B,EAAwBC,EAAGC,EAAGC,IAC5CwB,EAAUC,EAAYC,EAAWC,GAAcJ,EACtDvJ,EAAKwJ,GAAYhB,KAAKa,MAAY,IAANpB,GAC5BjI,EAAKyJ,GAAcjB,KAAKa,MAAc,IAARF,GAC9BnJ,EAAK0J,GAAalB,KAAKa,MAAa,IAAPD,GAC7BV,KAIR,OADAkB,QAAQC,IAAI,UAAWnB,GAChBN,GCzBJ,MAAM0B,EAAShC,GAAM,IAAMA,EAErBiC,EAAWjC,GAAM,GAAK,EAAIU,KAAKwB,KAAKlC,IAGpCmC,EAAQnC,GAAMU,KAAKO,IAAIjB,wDAJXA,GAAMA,mBAERA,GAAO,EAAIU,KAAK0B,KAAK,EAAI1B,KAAKI,IAAOJ,KAAKwB,KAAMlC,EAAIA,EAAK,QAC3DA,GAAMU,KAAK2B,KAAKrC,eAEhBA,GAAMU,KAAK4B,IAAI,EAAGtC,OACnBA,GAAMU,KAAKS,IAAInB,UACZA,GAAMA,EAAIA,ICPjC,MAOMuC,EAAYC,IACd,GAAuB,GAAnBA,EAAEC,OAAOjH,OACT,OAAOgH,EAAEE,aAEb,MAAMD,EAASD,EAAEC,OAAOlF,IAAIgF,GAC5B,OAAOC,EAAEE,WAZD,EAACC,EAAGC,KACZ,IAAIC,EAAM,EACV,IAAK,IAAItH,EAAI,EAAGA,GAAKoH,EAAEnH,OAAQD,IAC3BsH,GAAOF,EAAEpH,GAAKqH,EAAErH,GAEpB,OAAOsH,GAOaC,CAAIL,EAAQD,EAAEO,yLCoBtB7C,qBAAkBM,gJADtBrE,yHAzBR+D,EAAQ,IACRM,EAAS,0BAHTwC,EACA7G,UAFO8G,KAKPC,GAAW,EACXC,GAAQ,EJ8nBZ,IAAiB5M,EAAAA,OI5nBb4F,EAAM6G,EAAOI,WAAW,MACxBjH,EAAIkH,UAAY,QAChBlH,EAAImH,SAAS,EAAG,EAAGpD,EAAOM,SAEpB+C,EHWK,EAAClD,EAAKlE,EAAK+D,EAAOM,KAC7B,MAAMF,EAAYnE,EAAIqH,aAAa,EAAG,EAAGtD,EAAOM,GAIhD,OAHAJ,EAAUC,EAAKC,EAAW,EAAGJ,EAAOM,GACpCJ,EAAUC,EAAKC,EAAW,EAAGJ,EAAOM,GACpCJ,EAAUC,EAAKC,EAAW,EAAGJ,EAAOM,GAC7BF,GGhBYmD,CDDR,EAACC,EAAaC,KACzB,MAAM9E,EAAQ,IAAIN,IACZqF,EAAU9E,QAchB,OAbArI,OAAOqJ,KAAK6D,GAAO9M,SAAQgN,IACvB,MAAMC,EAAIH,EAAME,GAChBhF,EAAMgF,GAAM,IACLC,EACHrB,OAAQ,GACRM,QAAS,IAEbe,EAAEC,UAAYH,EAAQ1I,KAAK2D,EAAMiF,EAAED,QAEvCH,EAAY7M,SAASmN,IACjBnF,EAAMmF,EAAKC,IAAIxB,OAAOvH,KAAK2D,EAAMmF,EAAKjF,OACtCF,EAAMmF,EAAKC,IAAIlB,QAAQ7H,KAAK8I,EAAKE,UAClC,IACI,CAACrD,EAAOO,EAAGb,EAAO4D,KACrBtF,EAAM,GAAG6D,WAAaV,EAAMnB,GAC5BhC,EAAM,GAAG6D,WAAaV,EAAMZ,GAC5BvC,EAAM,GAAG6D,WAAaV,EAAMzB,GAC5B1B,EAAM,GAAG6D,WAAaV,EAAMmC,GACrBP,EAAQrG,IAAIgF,KCrBX6B,CAAQnB,EAAOS,YAAaT,EAAOU,OACZxH,EAAK+D,EAAOM,GAC/CrE,EAAIkI,aAAad,EAAY,EAAG,IJwnBhC3J,IAAwBM,GAAGiD,SAASjC,KAAK3E,SItnBvC+N,EAAWxK,6DACSK,QACtB+I,GAAYA,GACZoB,EAAS,oDAcEtB,uBANMG,GAASA,WACTA,GAASA,yQJoMnBlL,EAAK,qQKvMLkE,gBAAmBA,KAAO0H,mBAA/BrI,kMAFoDW,wQLwU1D,SAAkBlE,EAAMC,GACpBA,EAAO,GAAKA,EACRD,EAAKsM,YAAcrM,IACnBD,EAAKC,KAAOA,MK3UsCiE,mBAE/CA,KL2uBPG,EAAS,CACL8E,EAAG,EACHvE,EAAG,GACHX,EAAGI,KA4VX,SAA2BkI,EAAYvI,EAAOwI,EAASC,EAASvI,EAAKwI,EAAM3H,EAAQ3F,EAAMuN,EAASC,EAAmBC,EAAMC,GACvH,IAAInI,EAAI4H,EAAWhJ,OACfgH,EAAImC,EAAKnJ,OACTD,EAAIqB,EACR,MAAMoI,EAAc,GACpB,KAAOzJ,KACHyJ,EAAYR,EAAWjJ,GAAGrC,KAAOqC,EACrC,MAAM0J,EAAa,GACbC,EAAa,IAAI3G,IACjB4G,EAAS,IAAI5G,IAEnB,IADAhD,EAAIiH,EACGjH,KAAK,CACR,MAAM6J,EAAYL,EAAY5I,EAAKwI,EAAMpJ,GACnCrC,EAAMuL,EAAQW,GACpB,IAAI5I,EAAQQ,EAAOqI,IAAInM,GAClBsD,EAIIkI,GACLlI,EAAMN,EAAEkJ,EAAWnJ,IAJnBO,EAAQqI,EAAkB3L,EAAKkM,GAC/B5I,EAAMK,KAKVqI,EAAWI,IAAIpM,EAAK+L,EAAW1J,GAAKiB,GAChCtD,KAAO8L,GACPG,EAAOG,IAAIpM,EAAKwH,KAAKS,IAAI5F,EAAIyJ,EAAY9L,KAEjD,MAAMqM,EAAY,IAAIlK,IAChBmK,EAAW,IAAInK,IACrB,SAAS9D,EAAOiF,GACZD,EAAcC,EAAO,GACrBA,EAAMa,EAAEhG,EAAMyN,GACd9H,EAAOsI,IAAI9I,EAAMtD,IAAKsD,GACtBsI,EAAOtI,EAAMiJ,MACbjD,IAEJ,KAAO5F,GAAK4F,GAAG,CACX,MAAMkD,EAAYT,EAAWzC,EAAI,GAC3BmD,EAAYnB,EAAW5H,EAAI,GAC3BgJ,EAAUF,EAAUxM,IACpB2M,EAAUF,EAAUzM,IACtBwM,IAAcC,GAEdb,EAAOY,EAAUD,MACjB7I,IACA4F,KAEM0C,EAAWtJ,IAAIiK,IAKf7I,EAAOpB,IAAIgK,IAAYL,EAAU3J,IAAIgK,GAC3CrO,EAAOmO,GAEFF,EAAS5J,IAAIiK,GAClBjJ,IAEKuI,EAAOE,IAAIO,GAAWT,EAAOE,IAAIQ,IACtCL,EAAS3J,IAAI+J,GACbrO,EAAOmO,KAGPH,EAAU1J,IAAIgK,GACdjJ,MAfAgI,EAAQe,EAAW3I,GACnBJ,KAiBR,KAAOA,KAAK,CACR,MAAM+I,EAAYnB,EAAW5H,GACxBsI,EAAWtJ,IAAI+J,EAAUzM,MAC1B0L,EAAQe,EAAW3I,GAE3B,KAAOwF,GACHjL,EAAO0N,EAAWzC,EAAI,IAC1B,OAAOyC,iCAjaF3I,EAAO8E,GACRzK,EAAQ2F,EAAOO,GAEnBP,EAASA,EAAOJ,gCKrvBdV,qJAxBF0H,WAFO4C,KACPC,EAAa,QAEXC,EAAe/C,IACbC,EACIA,EAASW,KAAOZ,EAAOY,GACvBX,OAAW+C,GAGXnE,QAAQC,IAAI,YAAamB,GACzBpB,QAAQC,IAAI,YAAakB,OACzB6C,EAAU5C,EAASgD,MAAMjD,EAAQ,IACjCC,OAAW+C,MACXF,QAIJ7C,EAAWD,iEAYK+C,EAAa/C,6EC7B9B,MAAMkD,GACT9G,cACIC,KAAK8G,IAAMD,GAAOE,WAClB/G,KAAKgH,aAAe,GAExBzC,SAAW,OAAOvE,KAAK8G,IACvB/G,QACI,MAAM4D,EAAS,IAAIkD,GAInB,OAHAlD,EAAOS,YAAcpE,KAAKoE,YAAYnG,KAAIV,QAAWA,MACrDoG,EAAOU,MAAQ,IAAIpF,IACnB9H,OAAO8P,OAAOjH,KAAKqE,OAAO9M,SAAQiN,GAAKb,EAAOU,MAAMG,EAAED,IAAM,IAAKC,KAC1Db,EAEX5D,SACI,MAAMmH,EAAQlH,KAAKkH,QAQnB,OAPAA,EAAMC,gBACF/F,KAAKgG,SAAW,IAChBF,EAAMG,gBAENjG,KAAKgG,SAAW,IAChBF,EAAMI,UAEHJ,EAEXnH,gBACIC,KAAKoE,YAAY7M,SAASgG,IAClB6D,KAAKgG,SAAWpH,KAAKgH,eACrBzJ,EAAEqH,QAA0B,GAAhBxD,KAAKgG,SAAgB,OAI7CrH,gBACIwH,GAAmBvH,KAAKoE,YAAapE,KAAKqE,OAC1C,MAAMmD,EAAMrQ,OAAO8P,OAAOjH,KAAKqE,OAAOpG,KAAIuG,GAAKA,EAAED,KAC3CkD,EAAiBD,EAAItJ,QAAOqG,IAAO,CAAC,EAAG,EAAG,EAAG,GAAGmD,MAAKC,GAASA,GAASpD,MAC7E,IAAI9E,EACAmI,EACJ,EAAG,CACCnI,EAAOgI,EAAerG,KAAKa,MAAMb,KAAKgG,SAAWK,EAAevL,SAChE,MAAM2L,EAAY7H,KAAKoE,YAAYlG,QAAOX,GAAKA,EAAEkC,MAAQA,IAAMxB,KAAIV,GAAKA,EAAEoH,KAC1EiD,EAAczQ,OAAO8P,OAAOjH,KAAKqE,OAAOpG,KAAIuG,GAAKA,EAAED,KACnDqD,EAAcJ,EAAItJ,QAAOqG,IACbsD,EAAUH,MAAK/C,GAAMA,GAAMJ,MAC3B,CAAC,EAAG,EAAG,EAAG,GAAGmD,MAAK/C,GAAMA,GAAMJ,KAC/BvE,KAAKqE,MAAME,GAAIuD,SAAW9H,KAAKqE,MAAM5E,GAAMqI,iBAE3B,GAAtBF,EAAY1L,QACrB,MAAMyI,EAAKiD,EAAYxG,KAAKa,MAAMb,KAAKgG,SAAWQ,EAAY1L,SAC9D8D,KAAKoE,YAAYxI,KAAK,CAClB2I,GAAIsC,GAAOkB,eACXtI,KAAAA,EACAkF,GAAAA,EACAC,OAAwB,EAAhBxD,KAAKgG,SAAe,IAGpCrH,oBAEAA,UACI,MAAMiI,EAAY5G,KAAKa,MAAMb,KAAKgG,SAAWpH,KAAKoE,YAAYlI,QACxD+L,EAAUjI,KAAKoE,YAAY4D,GAAWvI,KACtCyI,EAAQlI,KAAKoE,YAAY4D,GAAWrD,GAC1C3E,KAAKoE,YAAYhE,OAAO4H,EAAW,GACnC,IAAIrQ,EAAI,IAAKwQ,UACNxQ,EAAE+K,MACT,MAAM0F,EAAuBjR,OAAO8P,OAAOtP,GACrCyL,EAAagF,EAAqBhH,KAAKa,MAAMb,KAAKgG,SAAWgB,EAAqBlM,SAClFqI,EAAKsC,GAAOwB,SAmBlB,OAlBArI,KAAKqE,MAAME,GAAM,CACbA,GAAAA,EACAnB,WAAAA,EACAqB,UAAU,EACVqD,SAAU,GAEd9H,KAAKoE,YAAYxI,KAAK,CAClB2I,GAAIsC,GAAOkB,eACXtI,KAAMwI,EACNtD,GAAIJ,EACJK,OAAwB,EAAhBxD,KAAKgG,SAAe,IAEhCpH,KAAKoE,YAAYxI,KAAK,CAClB2I,GAAIsC,GAAOkB,eACXtI,KAAM8E,EACNI,GAAIuD,EACJtD,OAAwB,EAAhBxD,KAAKgG,SAAe,IAEzB7C,EAEXxE,MAAMuI,EAAOC,GACT,MAAMC,EAAQxI,KAAKkH,QACnB,IAAK,MAAM1C,KAAKrN,OAAO8P,OAAOqB,EAAMjE,OAChCmE,EAAMnE,MAAMG,EAAED,IAAM,IAAKC,GAE7B,MAAM7E,EAAWH,MAAM+I,GAClBhK,KAAKiK,EAAO,EAAGD,GACftK,KAAIrB,IACL,MAAM6L,EAAQ7L,EAAEsK,QAEhB,OADAuB,EAAMrE,YAAc,GACbqE,KAEX,IAAK,MAAMlL,KAAK+K,EAAMlE,YAAa,CAC/B,MAAMsE,EAAYF,EAAMpE,YAAYuE,WAAU/L,GAAKA,EAAE2H,KAAOhH,EAAEgH,KAC9D,IAAkB,GAAdmE,EAAiB,CACjB,IAAK,MAAMD,KAAS9I,EACZyB,KAAKgG,SAAW,GAChBqB,EAAMrE,YAAYxI,KAAK4M,EAAMpE,YAAYsE,IAGzCD,EAAMrE,YAAYxI,KAAK2B,GAG/BiL,EAAMpE,YAAYhE,OAAOsI,EAAW,QAGpC,IAAK,MAAMD,KAAS9I,EAChB8I,EAAMrE,YAAYxI,KAAK2B,GAMnC,OAFAoC,EAASpI,SAAQgG,GAAKA,EAAE6G,YAAc7G,EAAE6G,YAAYwE,OAAOJ,EAAMpE,eACjE5B,QAAQC,IAAI,aAAc9C,GACnBA,EAAS1B,KAAIV,GAAKA,EAAEsL,YAGnChC,GAAOE,SAAW,EAClBF,GAAOwB,OAAS,EAChBxB,GAAOkB,aAAe,EACf,MAAMR,GAAqB,CAACnD,EAAaC,KAC5C,MAAMyE,EAAQ,IAAI1E,GACZ2E,EAAO,IAAI9J,IAKjB,IAJA8J,EAAK,GAAK1E,EAAM,GAChB0E,EAAK,GAAK1E,EAAM,GAChB0E,EAAK,GAAK1E,EAAM,GAChB0E,EAAK,GAAK1E,EAAM,GACTyE,EAAM5M,OAAS,GAClB,IAAK,IAAID,EAAI6M,EAAM5M,OAAS,GAAS,GAAND,EAASA,IAAK,CACzC,MAAMsB,EAAIuL,EAAM7M,GACZ8M,EAAKxL,EAAEkC,QACP4E,EAAM9G,EAAEoH,IAAImD,SAAWiB,EAAKxL,EAAEkC,MAAMqI,SAAW,EAC/CiB,EAAKxL,EAAEoH,IAAMN,EAAM9G,EAAEoH,IACrBmE,EAAM1I,OAAOnE,EAAG,MC3I1BoI,GAAQ,IAAIpF,IAClBoF,GAAM,GAAK,CACPE,GAAI,EACJnB,WAAY,IAAM,GAClBqB,UAAU,EACVqD,SAAU,GAEdzD,GAAM,GAAK,CACPE,GAAI,EACJnB,WAAY,IAAM,GAClBqB,UAAU,EACVqD,SAAU,GAEdzD,GAAM,GAAK,CACPE,GAAI,EACJnB,WAAY,IAAM,GAClBqB,UAAU,EACVqD,SAAU,GAEdzD,GAAM,GAAK,CACPE,GAAI,EACJnB,WAAY,IAAM,GAClBqB,UAAU,EACVqD,SAAU,GAEdzD,GAAM,GAAK,CACPE,GAAI,EACJnB,WAAYT,EACZ8B,UAAU,EACVqD,SAAU,GAEdzD,GAAM,GAAK,CACPE,GAAI,EACJnB,WAAYT,EACZ8B,UAAU,EACVqD,SAAU,GAEdzD,GAAM,GAAK,CACPE,GAAI,EACJnB,WAAYT,EACZ8B,UAAU,EACVqD,SAAU,GAEdzD,GAAM,GAAK,CACPE,GAAI,EACJnB,WAAYP,EACZ4B,UAAU,EACVqD,SAAU,GAEd,MAAM1D,GAAc,CAChB,CACIG,GAAI,EACJ9E,KAAM,EACNkF,GAAI,EACJC,OAAQxD,KAAKgG,SAAW,IAE5B,CACI7C,GAAI,EACJ9E,KAAM,EACNkF,GAAI,EACJC,OAAQxD,KAAKgG,SAAW,IAE5B,CACI7C,GAAI,EACJ9E,KAAM,EACNkF,GAAI,EACJC,OAAQxD,KAAKgG,SAAW,IAE5B,CACI7C,GAAI,EACJ9E,KAAM,EACNkF,GAAI,EACJC,QAASxD,KAAKgG,SAAW,IAAM,IAGjCzD,GAAS,IAAIkD,sRC1EHrH,MAAM,GACjBjB,KAAKoF,IACL1F,KAAIuG,GAAKA,EAAEqE,YDyEhBlF,GAAOS,YAAcA,GACrBT,GAAOU,MAAQA,UE9EH,kEAAQ,CAChBvM,OAAQW,SAASuQ,KACjBpK,MAAO"}