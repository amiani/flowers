{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Flower.svelte",
    "FlowerGrid.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import FlowerGrid from './FlowerGrid.svelte';\nimport genome from './network/IdentityNet';\n;\nconst flowers = Array(3)\n    .fill(genome)\n    .map(g => g.mutate());\n//# sourceMappingURL=App.svelte.js.map</script>\n\n<main>\n\t<FlowerGrid {flowers} />\n</main>\n\n<style>\n\tmain {\n\t\ttext-align: center;\n\t\tpadding: 1em;\n\t\tmax-width: 240px;\n\t\tmargin: 0 auto;\n\t}\n\n\t@media (min-width: 640px) {\n\t\tmain {\n\t\t\tmax-width: none;\n\t\t}\n\t}\n</style>",
    "<script lang='ts'>import { createEventDispatcher } from 'svelte';\nimport { onMount } from \"svelte\";\nimport drawFlower from './drawFlower';\nimport makeNet from \"./network/makeNet\";\nexport let genome;\nlet canvas;\nlet ctx;\nlet width = 200;\nlet height = 200;\nlet selected = false;\nlet hover = false;\nonMount(() => {\n    ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n    const net = makeNet(genome.connections, genome.genes);\n    const flowerData = drawFlower(net, ctx, width, height);\n    ctx.putImageData(flowerData, 0, 0);\n});\nconst dispatch = createEventDispatcher();\nconst handleFlowerClick = e => {\n    selected = !selected;\n    dispatch('click');\n};\n//# sourceMappingURL=Flower.svelte.js.map</script>\n\n<div\n  class='container'\n  class:selected\n  class:hover\n  on:mouseenter={()=>hover = !hover}\n  on:mouseleave={()=>hover = !hover}\n  on:click={handleFlowerClick}\n  style=\"width:{width}px; height:{height}px;\">\n  <canvas\n    class='flower-canvas'\n    bind:this={canvas}\n    {width}\n    {height} />\n</div>\n\n<style>\n  .container {\n    border: 4px black solid;\n  }\n  .hover {\n    border-color: dodgerblue;\n  }\n  .selected {\n    border-color: fuchsia;\n  }\n</style>",
    "<script lang='ts'>import Flower from './Flower.svelte';\n;\nexport let flowers;\nlet generation = 0;\nlet selected;\nconst selectFlower = genome => {\n    if (selected) {\n        if (selected.id === genome.id) {\n            selected = undefined;\n        }\n        else {\n            console.log('parent1: ', selected);\n            console.log('parent2: ', genome);\n            flowers = selected.cross(genome, 4);\n            selected = undefined;\n            generation++;\n        }\n    }\n    else {\n        selected = genome;\n    }\n};\n//# sourceMappingURL=FlowerGrid.svelte.js.map</script>\n\n<div class='container'>\n  <h1>Flowers!</h1>\n  <p>Click on two flowers to crossbreed them. Generation {generation}</p>\n  <div class='flower-grid'>\n    {#each flowers as genome (genome.id)}\n      <Flower\n        {genome}\n        on:click={() => selectFlower(genome)}/>\n    {/each}\n  </div>\n</div>\n\n<style>\n  .flower-grid {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-evenly;\n  }\n</style>"
  ],
  "names": [],
  "mappings": "AAaC,IAAI,eAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC;ACkBA,UAAU,eAAC,CAAC,AACV,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AACzB,CAAC,AACD,MAAM,eAAC,CAAC,AACN,YAAY,CAAE,UAAU,AAC1B,CAAC,AACD,SAAS,eAAC,CAAC,AACT,YAAY,CAAE,OAAO,AACvB,CAAC;ACbD,YAAY,cAAC,CAAC,AACZ,OAAO,CAAE,IAAI,CACb,SAAS,CAAE,IAAI,CACf,eAAe,CAAE,YAAY,AAC/B,CAAC"
}